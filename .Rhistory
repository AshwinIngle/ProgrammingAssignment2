submit()
submit()
skip()
submit()
"I" %p% "love" %p% "R!"
info
info()
bye()
exit()
q()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls-list<-lapply(flags,class)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
?sapply
?sapply
?sapply
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flg_colors<-flags[, 11:17]
flag_colors<-flags[, 11:17]
head(flag_colors)
lapplt(flag_colors,sum)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flag,unique)
unique_vals<-lapply(flags,unique)
unique_vals
length(unique_vals)
sapply(length(unique_vals))
length(sapply(unique_vals))
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem),elem[2])
lapply(unique_vals,function(elem) elem[2])
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
d2
unclass(d2)
Sys.time()
t1<-Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(11)
weekdays(t1)
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3<-"Ocotber 17, 1986 08:24"
t3<-"Ocotber 17, 1986 08:24"
t3<-"October 17, 1986 08:24"
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units='days')
swirl()
info()
play()
cube<-function(x,n){x^3}
cube(3)
x<-1:10
if(x>5){x<-0}
f<-function(x){g<-function(y){y+z}
z<-4
x+g(x)
}
z<-10
f(3)
h<-function(x,y=NULL,d=3L){z<-bind(x,d)
if(!is.null(y))
z<-z+y
else
z<-x+y/z
if(d==3L)
retyrn(g)
g<-g+10
g
}
q()
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(file.path(getwd(), directory))
total = 0
observations = 0
for (i in id)
{
if (i <10) {
data <- read.csv(paste("0","0", as.character(i), ".csv", sep=""),  ## for example, if 'id' =7, we get 007.csv
header = T,
na.strings=c("NA","NaN", " "))
}
else if (i>=10 & i<100) {
data <- read.csv(paste("0", as.character(i), ".csv", sep=""),  ## for example, if 'id' = 17, we get 017.csv
header = T,
na.strings=c("NA","NaN", " ")
)
}
else       {
data <- read.csv(paste(as.character(i), ".csv", sep=""),     ## Normal
header = T,
na.strings=c("NA","NaN", " ")
)
}
data = na.omit(data)
observations = observations + nrow(data)
if (pollutant == "sulfate") {total = total + sum(data$sulfate)}
else {total = total + sum(data$nitrate)}
}
setwd("..")
return (total/observations)
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
complete <- function(directory, id = 1:332) {
dataframe = NULL
setwd(file.path(getwd(), directory))
for (i in id)
{
if (i <10)
{
data <- read.csv(paste("0","0", as.character(i), ".csv", sep=""),
header = T,
na.strings=c("NA","NaN", " "))
}
else if (i>=10 & i<100) {
data <- read.csv(paste("0", as.character(i), ".csv", sep=""),
header = T,
na.strings=c("NA","NaN", " ")
)
}
else       {
data <- read.csv(paste(as.character(i), ".csv", sep=""),     \
header = T,
na.strings=c("NA","NaN", " ")
)
}
data = na.omit(data)
data = as.matrix(data)
dataframe = rbind(dataframe, c(i,nrow(data)))
}
setwd("..")
dataframe = data.frame(dataframe)
names(dataframe) = c('id', 'nobs')
return (dataframe)
complete <- function(directory, id = 1:332) {
dataframe = NULL  ## initializing the dataframe we want from this function
setwd(file.path(getwd(), directory)) ## setting the directory
#Looping thru the directory's files specified in the 'id' argument
for (i in id)
{
## Due to the format of the filename, i.e 001, 010  instead of 1, 10. I became aware that the following method works but not efficient,
## but at the time of the completion of this assignment, it was the only way I knew how to do it.
if (i <10) {
data <- read.csv(paste("0","0", as.character(i), ".csv", sep=""),  ## for example, if 'id' =7, we get 007.csv
header = T,
na.strings=c("NA","NaN", " "))
}
else if (i>=10 & i<100) {
data <- read.csv(paste("0", as.character(i), ".csv", sep=""),  ## for example, if 'id' = 17, we get 017.csv
header = T,
na.strings=c("NA","NaN", " ")
)
}
else       {
data <- read.csv(paste(as.character(i), ".csv", sep=""),     ## Normal
header = T,
na.strings=c("NA","NaN", " ")
)
}
## getting rid of all the "NA" values and, consequently, all the non-complete ovservations (the ones with at least one NA in row)
data = na.omit(data)
##  make it a matrix to easily fill each successive row of our dataframe
data = as.matrix(data)
dataframe = rbind(dataframe, c(i,nrow(data))) # fill each successive row of our dataframe. Each row contains the monitor ID,
# and its total complete observed cases (no rows containg NAs)
}
setwd("..")  # reseting working directory path
dataframe = data.frame(dataframe)  # from matix to data frame
names(dataframe) = c('id', 'nobs') # set the column names of the data frame
return (dataframe)
}
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
getwd()
setwd("Document")
setwd("Documents")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
vcorr <- function(directory, threshold = 0) {
setwd(file.path(getwd(), directory))
correlationVector = NULL
for (i in 1:332)
{
if (i <10) {
data <- read.csv(
paste("0","0", as.character(i), ".csv", sep=""),
header = T,
na.strings=c("NA","NaN", " ")
)
}
else if (i>=10 & i<100) {
data <- read.csv(
paste("0", as.character(i), ".csv", sep=""),  ## for example, if 'id' = 17, we get 017.csv
header = T,
na.strings=c("NA","NaN", " ")
)
}
else       {
data <- read.csv(
paste(as.character(i), ".csv", sep=""),
header = T,
na.strings=c("NA","NaN", " ")
)
}
data = na.omit(data)
if (nrow(data) > threshold) {
correlationVector = c(correlationVector, cor(data[,2], data[,3]))
}
}
setwd("..")
return (correlationVector)
}
corr <- function(directory, threshold = 0) {
setwd(file.path(getwd(), directory))
correlationVector = NULL
for (i in 1:332)
{
if (i <10) {
data <- read.csv(
paste("0","0", as.character(i), ".csv", sep=""),
header = T,
na.strings=c("NA","NaN", " ")
)
}
else if (i>=10 & i<100) {
data <- read.csv(
paste("0", as.character(i), ".csv", sep=""),  ## for example, if 'id' = 17, we get 017.csv
header = T,
na.strings=c("NA","NaN", " ")
)
}
else       {
data <- read.csv(
paste(as.character(i), ".csv", sep=""),
header = T,
na.strings=c("NA","NaN", " ")
)
}
data = na.omit(data)
if (nrow(data) > threshold) {
correlationVector = c(correlationVector, cor(data[,2], data[,3]))
}
}
setwd("..")
return (correlationVector)
}
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
corr <- function(directory, threshold = 0) {
setwd(file.path(getwd(), directory)) ## setting the directory
correlationVector = NULL ## initializing the correlation matrix
#Looping thru ALL the directory's files
for (i in 1:332)
{
## Due to the format of the filename, i.e 001, 010  instead of 1, 10. I became aware that the following method works but not efficient,
## but at the time of the completion of this assignment, it was the only way I knew how to do it.
if (i <10) {
data <- read.csv(
paste("0","0", as.character(i), ".csv", sep=""),  ## for example, if 'id' =7, we get 007.csv
header = T,
na.strings=c("NA","NaN", " ")
)
}
else if (i>=10 & i<100) {
data <- read.csv(
paste("0", as.character(i), ".csv", sep=""),  ## for example, if 'id' = 17, we get 017.csv
header = T,
na.strings=c("NA","NaN", " ")
)
}
else       {
data <- read.csv(
paste(as.character(i), ".csv", sep=""),     ## Normal
header = T,
na.strings=c("NA","NaN", " ")
)
}
## getting rid of all the "NA" values and, consequently, all the non-complete ovservations (the ones with at least one NA in row)
data = na.omit(data)
## if the number of complete observed cases meets the quota, find the correlation between the pollutants for the given monitor AND
## store the results in the correlation matrix
if (nrow(data) > threshold) {
correlationVector = c(correlationVector, cor(data[,2], data[,3]))
}
}
setwd("..")  # reseting working directory path
return (correlationVector)
}
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))getwd()
getwd()
setwd("Documents")
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
q()
?file.path
?na
?na.strings
?na.strings()
?nstrings
?strings
??strings
??na.strings
?n?a
??na
?isna
?is.na
?is.nan
?na.omit
?na.omit
q()
?runif
x<-1:4
x
lapply(x,runif)
lapply(x,runif,min=0,max=10)
x
q()
library(swirl)
swirl()
sapply(flags,unique)
sapply(flags,unique,numeric(1))
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
skip()
quit()
getwd()
ls()
cachematrix.R
ls()
cachematrix.R
a.r
open
?open
open(cachematrix.R)
open("cachematrix.R")
cachematrix.R
cacheMatrix.R
source("cachematrix.R")
open("cachematrix.R")
source("cachematrix.R")
source("cachematrix.R")
source("cachematrix.R")
source("cachematrix.R")
a<-makeCacheMatrix()
a$set(matrix(1:4,2,2))
cacheSole(a)
cacheSolve(a)
cacheSolve(a)
source("cachematrix.R")
a<-makeCacheMatrix()
cacheSolve(a)
source("cachematrix.R")
a<-makeCacheMatrix()
a$set(matrix(1:4,2,2))
cacheSolve(a)
source("cachematrix.R")
a<-makeCacheMatrix()
a$set(matrix(1:4,2,2))
cacheSolve(a)
q()
## Put comments here that give an overall description of what your
## functions do
## The following pair of functions work in cordination to create a squrae invertible matrix
## This inverse of square matrix is stored in cache environment for future use
## Write a short comment describing this function
## makeCacheMatrix creates a matrix object that caches its inverse and returns a list of functions
## used by the following cacheSolve to get or set the inverted matrix in cache
makeCacheMatrix <- function(x = matrix()) {
##store cached value
##initialize to NULL
cache <- NULL
##creating matrix in working environment
set <- function(y) {
x <<- y
cache <<- NULL
}
##get matrix value
get <- function() x
##inverse the matrix and store in cache
setMatrix <- function(inverse) cache<<- inverse
##get inverted matrix from cache
getInverse <- function() cache
##return created fnuctions working environment
list(set = set, get = get , setMatrix = setMatrix , getInverse = getInverse)
}
## Write a short comment describing this function
##cacheSolve calculates inverse of matrix created in makeCacheMatrix
##if invert already is created and exists in cache then it is retrieved else
##if invert does not exists in cache, it is created in working environment
##and value is stored in cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##attempting to get inverse if any stored in cache
cache <- x$getInverse()
##return inverse of matrix from cache if it exists
if(!is.null(cache)) {
message("getting cached data")
return(cache)
}
##create matrix as it does not exists in cache
matrix <- x$get()
cache <- solve(matrix, ...)
x$setMatrix(cache)
return(cache)
}
a<- makeCacheMatrix()
a$set(matrix(1:4,2,2))
cacheSolve(a)
cacheSolve(a)
